	"token ::=",
	"	number-token | 	symbol-token 	",
	"<tmp>",
	"number-token ::=",
	"	integer | 	ratio | 	float 				          ",
	"integer ::=",
	"	[sign] {decimal-digit}+ decimal-point | 	[sign] {digit}+ 				         ",
	"[sign]",
	"sign",
	"sign ::=",
	"+ | -",
	"+",
	"-",
	"@",
	"{decimal-digit}",
	"{digit}",
	"ratio ::=",
	"	[sign] {digit}+ slash {digit}+  				      ",
	"float ::=",
	"	[sign] {decimal-digit}* decimal-point {decimal-digit}+ [exponent] |                        [sign] {decimal-digit}+ [decimal-point {decimal-digit}*] exponent 				       ",
	"symbol-token ::=",
	"<undefined>",
	"object ::=",
	"	element | 	<undefined> 	",
	"<tmp>",
	"element ::=",
	"	list_car_element | 	array | 	sequence | 	type | 	input-stream | 	output-stream | 	class 	",
	"list_car_element ::=",
	"	token | 	lisp-char 	",
	"token ::=",
	"lisp-char ::=",
	"	whitespace |  	constituent-char | 	single-escape |  	multiple-escape | 	macro-char 	",
	"whitespace ::=",
	"	backspace |  	tab |  	newline |  	linefeed |  	page |  	return-char |  	space 		",
	"backspace ::=",
	"#\b",
	"tab ::=",
	"#\t",
	"newline ::=",
	"#\r",
	"linefeed ::=",
	"#\n",
	"page ::=",
	"#\p",
	"return-char ::=",
	"space ::=",
	"#\space ",
	"#\space",
	"constituent-char ::=",
	"	$ | % | & | * | + | - | . | / | 	0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 	: | < | = | > | @ |  	A | B | C | D | E | F | G | H | I | J | K | L | M |  	N | O | P | Q | R | S | T | U | V | W | X | Y | Z | 	a | b | c | d | e | f | g | h | i | j | k | l | m |  	n | o | p | q | r | s | t | u | v | w | x | y | z |	 	^ | _ | ~ | rubout 	",
	"$",
	"%",
	"&",
	"*",
	"+",
	"-",
	".",
	"/",
	"0",
	"1",
	"2",
	"3",
	"4",
	"5",
	"6",
	"7",
	"8",
	"9",
	":",
	"<",
	"=",
	">",
	"@",
	"A",
	"B",
	"C",
	"D",
	"E",
	"F",
	"G",
	"H",
	"I",
	"J",
	"K",
	"L",
	"M",
	"N",
	"O",
	"P",
	"Q",
	"R",
	"S",
	"T",
	"U",
	"V",
	"W",
	"X",
	"Y",
	"Z",
	"^",
	"_",
	"~",
	"rubout ::=",
	"#\rubout",
	"single-escape ::=",
	"#\backslash",
	"multiple-escape ::=",
	"#\vertical-bar",
	"macro-char ::=",
	"	terminating-char |  	non-terminating-char 	",
	"terminating-char ::=",
	"" | ' | left-parent | right-parent | , | ; | `",
	""",
	"'",
	",",
	";",
	"`",
	"non-terminating-char ::=",
	"##  left-parent := #\() right-parent := #\)",
	"##",
	"list ::=",
	"	( LIST { object }* )",
	"(",
	"<tmp>",
	"cdr ::=",
	"( CDR list )",
	"(",
	"<tmp>",
	"num-not-equal-than ::=",
	"	( /= {number-token}* ) | 	( != {number-token}* )		 	 	",
	"<tmp>",
	"(",
	"equal ::=",
	"(EQUAL object object )",
	"compound-form ::=",
	"	list | 	car | 	cdr | 	cons | 	eq | 	if | 	return | 	block | 	( SETQ {setq-pair}* ) | 	num-add | 	num-less-than | 	num-less-or-equal-than | 	num-greater-than | 	num-greater-or-equal-than | 	num-equal-than  | 	num-not-equal-than | 	( LOOP {compound-form}* ) 	",
	"<tmp>",
	"list ::=",
	"car ::=",
	"cdr ::=",
	"cons ::=",
	"( CONS object object )",
	"(",
	"eq ::=",
	"if ::=",
	"	( IF test-form then-form [else-form] )",
	"return ::=",
	"	( RETURN [form] ) 	 	",
	"block ::=",
	"	( BLOCK block-name { form }* ) 	",
	"num-add ::=",
	"num-less-than ::=",
	"num-less-or-equal-than ::=",
	"num-greater-than ::=",
	"num-greater-or-equal-than ::=",
	"num-equal-than ::=",
	"	( = {number-token}* ) 			",
	"=",
	"{number-token}",
	"num-not-equal-than ::=",
	"setq ::=",
	"( SETQ {setq-pair}* )",
	"(",
	"<tmp>",
	"defconstant ::=",
	"( DEFCONSTANT name form [documentation] )",
	"(",
	"<tmp>",
	"if ::=",
	"	( IF test-form then-form [else-form] )",
	"(",
	"<tmp>",
	"return ::=",
	"	( RETURN [form] ) 	 	",
	"(",
	"<tmp>",
	"loop ::=",
	"	( LOOP {compound-form}* )",
	"(",
	"<tmp>",
	"defun ::=",
	"	( DEFUN function-name lambda-list [documentation] {form}* )",
	"(",
	"<tmp>",
	"defstruct ::=",
	"	( DEFSTRUCT name ( {slot-name}* ) ) 	",
	"(",
	"<tmp>",
	"defmacro ::=",
	"	( name lambda-list [documentation] {form}* ) 	 	 	",
	"(",
	"<tmp>",
	"name ::=",
	"<sub>",
	"symbol-token ::=",
	"lambda-list ::=",
	"{var}",
	"[documentation]",
	"documentation",
	"documentation ::=",
	"string",
	"string ::=",
	"<TBD>",
	"{form}",
	"@",
