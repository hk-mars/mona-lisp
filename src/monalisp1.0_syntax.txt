
/* Monalisp1.0 syntax
 */
 
 
lisp-char ::=
	whitespace | 
	constituent-char |
	single-escape | 
	multiple-escape |
	macro-char
	
whitespace ::=
	backspace | 
	tab | 
	newline | 
	linefeed | 
	page | 
	return-char | 
	space
		
backspace ::= #\backspace
tab ::= #\tab
newline ::= #\newline
linefeed ::= #\linefeed
page ::= #\p
return-char ::= #\r
space ::= #\space 

constituent-char ::= 
	$ | % | & | * | + | - | . | / |
	0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 |
	: | < | = | > | @ | 
	A | B | C | D | E | F | G | H | I | J | K | L | M | 
	N | O | P | Q | R | S | T | U | V | W | X | Y | Z |
	a | b | c | d | e | f | g | h | i | j | k | l | m | 
	n | o | p | q | r | s | t | u | v | w | x | y | z |	
	^ | _ | ~ | rubout


constituent-undefined ::=
	! | ? | [ | ] | { | }
		
rubout ::= #\rubout

single-escape ::= \

multiple-escape ::= #\vertical-bar

macro-char ::= 
	terminating-char | 
	non-terminating-char
	
terminating-char ::= " | ' | left-parent | right-parent | , | ; | `

non-terminating-char ::= #


left-parent ::= #\(
right-parent ::= #\)

token ::=
	number-token |
	symbol-token
	
number-token ::=
	integer |
	ratio |
	float
				          
integer ::=
	[sign] {decimal-digit}+ decimal-point |
	[sign] {digit}+
				         
ratio ::=
	[sign] {digit}+ slash {digit}+ 
				      
float ::=
	[sign] {decimal-digit}* decimal-point {decimal-digit}+ [exponent] |                   
    [sign] {decimal-digit}+ [decimal-point {decimal-digit}*] exponent
				       
exponent ::=
	exponent-marker [sign] {digit}+	      

sign ::= + | -

slash ::= /

decimal-point ::= .

exponent-marker ::= 
	e | s | f | d | l | E | S | F | D | L

decimal-digit ::= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9

digit ::= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | <undefined>
	
symbol-token ::= <undefined>


list ::= 
	( LIST { object }* )

object ::= 
	element |
	<undefined>
	
element ::=
	list_car_element |
	array |
	sequence |
	type |
	input-stream |
	output-stream |
	class
	
list_car_element ::=
	token |
	lisp-char |
	( LIST { object }* ) |
	( CAR list ) |
	( CDR list )
	

cons ::= ( CONS object object )

car ::= 
	( CAR list ) |
	( CAR cdr ) |
	( CAR nil )

cdr ::= 
	( CDR list ) |
	( CDR nil )		

setq ::= ( SETQ {setq-pair}* )

setq-pair ::= setq-var form

setq-var ::= symbol-token

defconstant ::= ( DEFCONSTANT name form [documentation] )

name ::= symbol-token

form ::= object | symbol-token | compound-form

documentation ::= string

compound-form ::=
	list |
	car |
	cdr |
	cons |
	eq |
	if |
	return |
	block |
	( SETQ {setq-pair}* ) |
	num-add |
	num-less-than |
	num-less-or-equal-than |
	num-greater-than |
	num-greater-or-equal-than |
	num-equal-than  |
	num-not-equal-than |
	quote |
	( LOOP {compound-form}* )
	

operator ::= 
	function-call-operator |
	special-form-operator |
	macro-operator |
	lambda-expression
	
function-call-operator ::=
	+ | - | * | / | 
	CAR | CDR | CONS |
	<TBD>
	
special-form-operator ::= 
	QUOTE |
	LET | LET* |
	IF |
	BLOCK |
	CATCH | THROW |
	SETQ |
	<TBD>

macro-operator ::=
	defmacro |
	<TBD>
	
string ::= <TBD>


if ::=
	( IF test-form then-form [else-form] )

test-form ::= form

then-form ::= form

else-form ::= form

eq ::= ( EQ object object )

eql ::= (EQL object object )

equal ::= (EQUAL object object )


loop ::=
	( LOOP {compound-form}* )

return ::= 
	( RETURN [form] ) 	
	
block ::=
	( BLOCK block-name { form }* )
	
block-name ::= symbol-token
	

defun ::=
	( DEFUN function-name lambda-list [documentation] {form}* )

function-name ::= symbol-token | list

lambda-list ::= ( {var}* )

declaration ::= expression

documentation ::= string

expression ::= <TBD>


let ::=
	( LET ({var | (var [init-form])}*) {declaration}* {form}* )

var ::= symbol-token

init-form ::= form

num-add ::= 
	( + {number-token}* )
	
num-less-than ::= 
	( < {number-token}* )
	
num-less-or-equal-than ::= 
	( <= {number-token}* )
		
num-greater-than ::= 
	( > {number-token}* )
			
num-greater-or-equal-than ::= 
	( >= {number-token}* )		
		
num-equal-than ::= 
	( = {number-token}* )
			
num-not-equal-than ::= 
	( /= {number-token}* ) |
	( != {number-token}* )		
	
	
defstruct ::=
	( DEFSTRUCT name ( {slot-name}* ) )
	
name ::= symbol-token

slot-name ::= symbol-token


defmacro ::=
	( name lambda-list [documentation] {form}* )
	

print ::=
      ( PRINT object [output-stream] )

output-stream ::= <undefined>


quote ::= 
	' object |
	QUOTE object
	





